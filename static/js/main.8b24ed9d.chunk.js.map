{"version":3,"sources":["components/TodoItem.js","components/TodoItemList.js","components/CountInfo.js","helper/index.js","App.js","index.js"],"names":["TodoItem","_ref","todo","updateComplete","deleteItem","react_default","a","createElement","className","done","type","onChange","checked","value","title","onClick","TodoItemList","todoItemsList","renderTodoItems","map","todoItem","index","components_TodoItem","key","CountInfo","count","active","total","addHelper","state","todos","list","newInput","inputValue","trim","retObj","push","_saveData","deleteHelper","indexOf","splice","updateHelper","isEmpty","obj","hasOwnProperty","localStorage","setItem","JSON","stringify","App","parse","getItem","inputHandler","evt","_this","setState","target","addHandler","event","preventDefault","deleteHandler","completeHandler","_this$state","this","components_CountInfo","name","onSubmit","autoFocus","length","components_TodoItemList","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8b24ed9d.chunk.js","sourcesContent":["import React from 'react';\n\nconst TodoItem = ({ todo, updateComplete, deleteItem }) => {\n  return (\n    <li\n      className={\n        'list-group-item d-flex justify-content-between align-items-center ' +\n        (todo.done ? 'completed' : '')\n      }\n    >\n      <input\n        type='checkbox'\n        onChange={() => {\n          updateComplete(todo); //call updateHandler in App.js for current todo item. i.e.to change state of current todo item(completed | inprogress)\n        }}\n        checked={todo.done}\n      />\n      {todo.value}\n      <span\n        className='badge badge-danger badge-pill remove-item'\n        title='Remove'\n      >\n        <i\n          onClick={() => {\n            deleteItem(todo); //call deleteHandler in App.js for current todo item. i.e.to delete current todo item\n          }}\n          className='fa fa-remove'\n        />\n      </span>\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\nconst TodoItemList = ({ todoItemsList, deleteItem, updateComplete }) => {\n  let renderTodoItems = todoItemsList.map((todoItem, index) => {\n    return (\n      <TodoItem\n        todo={todoItem}\n        deleteItem={deleteItem}\n        updateComplete={updateComplete}\n        key={index}\n      />\n    );\n  });\n  return <ul className='list-group'>{renderTodoItems}</ul>;\n};\n\nexport default TodoItemList;\n","import React from 'react';\nconst CountInfo = ({ count }) => {\n  return (\n    <p className='lead'>\n      <strong>{count.active}</strong> Active{' '}\n      {count.active === 1 ? `Item` : `Items`} | <strong>{count.total}</strong>{' '}\n      Total {count.total === 1 ? `Item` : `Items`}\n    </p>\n  );\n};\nexport default CountInfo;\n","/**\n * Helper function to add new todo item\n * @param {Object} state\n * @param {Object} todo\n */\nexport const addHelper = state => {\n  let todos = state.list;\n  let count = state.count;\n  let newInput = state.inputValue.trim();\n  const retObj = {};\n\n  if (newInput) {\n    // update active and total counter and add new item to todos array\n    count.active++;\n    count.total++;\n    todos.push({ value: newInput, done: false });\n\n    //persist data to localstorage\n    _saveData(todos, count);\n    retObj.list = todos;\n    retObj.inputValue = '';\n    retObj.count = count;\n\n    return retObj;\n  }\n};\n\n/**\n * Helper function to delete todo item\n * @param {Object} state\n * @param {Object} todo\n */\nexport const deleteHelper = (state, todo) => {\n  let todos = state.list;\n  let count = state.count;\n  const retObj = {}; // return object which will update be used to setState()\n\n  let index = todos.indexOf(todo); // get the index of todo item\n\n  // update active and total counter\n  if (!todos[index].done) {\n    count.active--;\n  }\n  count.total--;\n  todos.splice(todos.indexOf(todo), 1);\n\n  //persist data to localstorage\n  _saveData(todos, count);\n  retObj.list = todos;\n  retObj.count = count;\n  return retObj;\n};\n\n/**\n * Helper function to toggle todo item state (completed|inprogress)\n * @param {Object} state\n * @param {Object} todo\n */\nexport const updateHelper = (state, todo) => {\n  let todos = state.list;\n  let count = state.count;\n  const retObj = {}; // return object which will update be used to setState()\n  let index = todos.indexOf(todo); // get the index of todo item\n\n  todos[index].done = !todos[index].done; // toggle todo item state (completed|inprogress)\n\n  // update active and total counter\n  if (todos[index].done) {\n    count.active--;\n  } else {\n    count.active++;\n  }\n\n  //persist data to localstorage\n  _saveData(todos, count);\n  retObj.list = todos;\n  retObj.count = count;\n  return retObj;\n};\n\n/**\n * Checks if Object is empty\n * @param {Object} obj\n */\nexport const isEmpty = obj => {\n  for (var key in obj) {\n    if (obj.hasOwnProperty(key)) return false;\n  }\n  return true;\n};\n\n/**\n * Save data to localstorage\n * @param {Object} todos\n * @param {Object} count\n */\nconst _saveData = (todos, count) => {\n  localStorage.setItem('todos', JSON.stringify(todos));\n  localStorage.setItem('count', JSON.stringify(count));\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport TodoItemList from './components/TodoItemList';\nimport CountInfo from './components/CountInfo';\nimport { isEmpty, addHelper, deleteHelper, updateHelper } from './helper';\n\nclass App extends Component {\n  state = {\n    list:\n      typeof localStorage['todos'] != 'undefined'\n        ? JSON.parse(localStorage.getItem('todos'))\n        : [],\n    inputValue: '',\n    count:\n      typeof localStorage['count'] != 'undefined'\n        ? JSON.parse(localStorage.getItem('count'))\n        : { active: 0, total: 0 },\n  };\n\n  /**\n   * input change handler\n   */\n  inputHandler = evt => {\n    this.setState({\n      inputValue: evt.target.value,\n    });\n  };\n\n  /**\n   * handlers form submission and adds new todo item\n   */\n  addHandler = event => {\n    event.preventDefault(); // stop this event.\n\n    let obj = addHelper(this.state);\n    if (!isEmpty(obj)) {\n      this.setState(obj);\n    }\n  };\n\n  /**\n   * todo item delete handler\n   */\n  deleteHandler = todo => {\n    let obj = deleteHelper(this.state, todo);\n    if (!isEmpty(obj)) {\n      this.setState(obj);\n    }\n  };\n\n  /**\n   * updates todo item's state (completed|inprogress)\n   */\n  completeHandler = todo => {\n    let obj = updateHelper(this.state, todo);\n    if (!isEmpty(obj)) {\n      this.setState(obj);\n    }\n  };\n\n  render() {\n    const { count, inputValue, list } = this.state;\n    return (\n      <div className='container text-center'>\n        <div className='jumbotron'>\n          <h1 className='display-4'>Todo List</h1>\n          <CountInfo count={count} />\n\n          <hr className='my-4' />\n\n          <form name='todo' onSubmit={this.addHandler}>\n            <div className='form-group'>\n              <input\n                type='text'\n                className='form-control'\n                value={inputValue}\n                onChange={this.inputHandler}\n                autoFocus\n              />\n            </div>\n            <button className='btn btn-primary' onClick={this.addHandler}>\n              Add\n            </button>\n          </form>\n\n          <hr className='my-4' />\n\n          {list.length > 0 ? (\n            <TodoItemList\n              todoItemsList={list}\n              deleteItem={this.deleteHandler}\n              updateComplete={this.completeHandler}\n            />\n          ) : (\n            <p className='lead'>Start adding items to your todo list now!</p>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}